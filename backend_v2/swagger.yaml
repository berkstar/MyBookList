openapi: '3.0.0'
info:
  title: My Book List API with Swagger
  version: '1.0'
  description: "This is a simple CRUD API application made with Express and documented with Swagger 
  <br><br><h1>AUTH PASS (üîë): admin
  <br><br><h1>SUPER-AUTH PASS (üîëü¶π‚Äç‚ôÇÔ∏è): superadmin for System API calls and Librarian registeration."
servers:
  - url: http://localhost:8080/
  


#---<<<<<<<<<<<<<<<<<<<<<<<<<<<USER>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
components:
  schemas:
    User: 
           type: object
           required: 
               - username
               - email
               - name
               - password
           properties:
               user_id:
                   type: integer
               username:
                   type: string
               name:
                   type: string
               email:
                   type: string
               biography:
                   type: string
               password:
                   type: string
           example:
               username: Mahmut_03
               email: test@test.com
               name: Mahmut
               password: testtset

  securitySchemes:
    Authorization:          
      type: apiKey
      name: Authorization
      in: header
      description: 'Use that token => admin'
    Super-Authorization:          
      type: apiKey
      name: super_auth
      in: header
      description: 'Super Special key for creating librarians => superadmin'  
         
security:
   - Authorization: []    





paths:
#---<<<<<<<<<<<<<<<<<<<<<<<<<<<System>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  /system/inserttuples:
    post:
      security:
        - Super-Authorization: []
      tags:
        - "System"

      description: Insert example tuples.
      responses:
        '200':
          description: OK - Inserted
        '500':
          description: MYSQL ERROR.

  /system/truncatetables:
    delete:
      security:
        - Super-Authorization: []
      tags:
        - "System"

      description: Truncate tables.
      responses:
        '200':
          description: OK - Truncated.
        '500':
          description: MYSQL ERROR.

  /system/inserttables:
    post:
      security:
        - Super-Authorization: []
      tags:
        - "System"

      description: <h1>Creates tables (Do not use until fully implemented)üß∞.
      responses:
        '200':
          description: OK - Inserted.
        '500':
          description: MYSQL ERROR.







#---<<<<<<<<<<<<<<<<<<<<<<<<<<<Forum>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  /forum/getallthreads:
    get:
      tags:
        - "Forum"

      description: Listing All Threads
      responses:
        '200':
          description: OK - Listed
          content:
            application/json:
              schema:
                type: array
                items:
                    properties:
                      tid:
                        type: string
                      name:
                        type: string
                      context:
                        type: string
        '401':
          description: Unauthorized - Token is expired or wrong.

  /forum/followthread:
    post:
      tags:
        - "Forum"

      description: User follows a thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: User ID
                    example: 2
                  tid:
                    type: integer
                    format: Thread ID
                    example: 6
      responses:
        '200':
          description: OK - Successfully followed a thread.
        '401':
          description: Unauthorized - Token is expired or wrong.


  /forum/unfollowthread:
    delete:
      tags:
        - "Forum"

      description: User unfollows a thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: User ID
                    example: 2
                  tid:
                    type: integer
                    format: Thread ID
                    example: 6
      responses:
        '200':
          description: OK - Successfully unfollowed a thread.
        '401':
          description: Unauthorized - Token is expired or wrong.

  /forum/listfollowedthreads:
    get:
      tags:
        - "Forum"

      description: Listing followed threads.
      parameters:
        - in: query
          name: uid
          schema:
            type: integer
      responses:
        '200':
          description: OK - Listed
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    pid:
                      type: integer
                    user_name:
                      type: string
                    title:
                      type: string
                    text:
                      type: string
        '401':
          description: Unauthorized - Token is expired or wrong.


  /forum/getposts:
    get:
      tags:
        - "Forum"

      description: Listing Post in a Thread
      parameters:
        - in: query
          name: tid
          schema:
            type: integer
      responses:
        '200':
          description: OK - Listed
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    pid:
                      type: integer
                    user_name:
                      type: string
                    title:
                      type: string
                    text:
                      type: string
        '401':
          description: Unauthorized - Token is expired or wrong.

  /forum/likepost:
    put:
      tags:
        - "Forum"

      description: User likes the post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 2
                  pid:
                    type: integer
                    format: post_id
                    example: 6
      responses:
        '200':
          description: OK - Successfully liked.
        '401':
          description: Unauthorized - Wrong username or email.

  /forum/updatepost:
    put:
      tags:
        - "Forum"

      description: Updates the post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 2
                  pid:
                    type: integer
                    format: post_id
                    example: 6
                  title:
                    type: string
                    format: Title of Post
                    example: "This Book sucks"
                  context:
                    type: integer
                    format: context
                    example: "Context"
      responses:
        '200':
          description: OK - Successfully updated the post.
        '401':
          description: Unauthorized - Wrong username or email.


  /forum/deletepost:
    delete:
      tags:
        - "Forum"

      description: Deletes the post from forum.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: User ID
                    example: 2
                  pid:
                    type: integer
                    format: Post ID
                    example: 4
      responses:
        '200':
          description: OK - Successfully unfollowed a thread.
        '401':
          description: Unauthorized - Token is expired or wrong.

  /forum/postpost:
    post:
      tags:
        - "Forum"

      description: Post a post to a thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: User ID
                    example: 2
                  tid:
                    type: integer
                    format: Thread ID
                    example: 6
                  name:
                    type: string
                    format: Post title
                    example: "Example Post Title"
                  text:
                    type: string
                    format: Post context
                    example: "Example Post Text"
      responses:
        '200':
          description: OK - Successfully posted a post.
        '401':
          description: Unauthorized - Token is expired or wrong.


  /forum/getpost:
    get:
      tags:
        - "Forum"

      description: List a post and its comments.
      parameters:
        - in: query
          name: pid
          schema:
            type: integer
      responses:
        '200':
          description: OK - Listed
          content:
            application/json:
              schema:
                type: object
                properties:
                    pid:
                      type: integer
                    user_name:
                      type: string
                    title:
                      type: string
                    text:
                      type: string
                    like_count:
                      type: integer
                    date:
                      type: string
                    comments:
                     type: array
                     items:
                        type: object
                        properties:
                          user_name:
                            type: string
                          name:
                            type: string
                          text:
                            type: string       
                          date:
                            type: string
        '401':
          description: Unauthorized - Token is expired or wrong.
#---<<<<<<<<<<<<<<<<<<<<<<<<<<<USER>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>





  /user/login:
    post:
      tags:
        - "User-General"

      description: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  username:
                    type: string
                  password:
                    type: string
              example:
               username: Mahmut_03
               password: testtset
              
      responses:
        '200':
          description: OK - Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  token:
                    type: string
                  type:
                    type: integer
        '401':
          description: Unauthorized - Wrong username or email.




       
  /user/register:
    post:
      security:
        - Super-Authorization: []
        
      tags:
        - "User-General"

      description: Registers the user. Super-Auth Key is required in order to register as Librarian.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
               user_id:
                  type: integer
               username:
                  type: string
               name:
                  type: string
               email:
                  type: string
               biography:
                  type: string
               password:
                  type: string
               type:
                  type: integer
              example:
               username: Mahmut_03
               email: test@test.com
               name: Mahmut
               password: testtset
               type: 1
      responses:
        '200':
          description: OK - Successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  token:
                    type: string
                  type:
                    type: integer
        '406':
          description: Not Acceptable - User with same username or email already exists.



  /user/addfriend:
    post:
      tags:
        - "User-Friend"

      description: Adds friend to the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 1
                  fid:
                    type: integer
                    format: friend_id
                    example: 7

              
      responses:
        '200':
          description: OK - Successfully added the friend.
        '401':
          description: Unauthorized - Wrong username or email.

  /user/removefriend:
    delete:
      tags:
        - "User-Friend"

      description: Removes friend from friendlist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 2
                  fid:
                    type: integer
                    format: friend_id
                    example: 10
      responses:
        '200':
          description: OK - Removed.
        '401':
          description: Unauthorized - Wrong username or email.



  /user/incomingrequests:
    get:
      tags:
        - "User-Friend"

      description: Gets incoming friend requests.
      parameters:
        - in: query
          name: uid
          schema:
            type: integer
          description: Id of user
          example: 1
      responses:
        '200':
          description: OK - Successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    sender_id:
                      type: integer
                    receiver_id:
                      type: integer
                    user_name:
                      type: string
                    name:
                      type: string
                    accepted:
                      type: boolean   
        '401':
          description: Unauthorized - Token is expired or wrong.

  /user/outgoingrequests:
    get:
      tags:
        - "User-Friend"

      description: Gets received friend requests.
      parameters:
        - in: query
          name: uid
          schema:
            type: integer
          description: Id of user
          example: 1
      responses:
        '200':
          description: OK - Successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    sender_id:
                      type: integer
                    receiver_id:
                      type: integer
                    user_name:
                      type: string
                    name:
                      type: string
                    accepted:
                      type: boolean 
        '401':
          description: Unauthorized - Token is expired or wrong.


  /user/requestresponse:
    put:
      tags:
        - "User-Friend"
      description: For accepting or declining friend requests. Response is 1(accept) or 0(decline)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 1
                  sender_id:
                    type: integer
                    format: sender_id
                    example: 2
                  response:
                    type: boolean
                    format: 1(accept) or 0(decline)
                    example: 1
      responses:
        '200':
          description: OK - Successfully updated.
        '401':
          description: Unauthorized - Wrong username or email.

  /user/setbio:
    put:
      tags:
        - "User-General"

      description: Sets biography of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 1
                  bio:
                    type: string
                    format: biography
                    example: "My Biography"
      responses:
        '200':
          description: OK - Successfully updated.
        '401':
          description: Unauthorized - Wrong username or email.

  /user/setemail:
    put:
      tags:
        - "User-General"

      description: Sets email of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 1
                  email:
                    type: string
                    format: email
                    example: "new@mail.com"
      responses:
        '200':
          description: OK - Successfully updated.
        '401':
          description: Unauthorized - Wrong username or email.



  /user/setname:
    put:
      tags:
        - "User-General"

      description: Sets name of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 1
                  name:
                    type: string
                    format: name
                    example: "Mr.Wonka"
      responses:
        '200':
          description: OK - Successfully updated.
        '401':
          description: Unauthorized - Wrong username or email.

  /user/setpassword:
    put:
      tags:
        - "User-General"

      description: Sets password of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 1
                  password:
                    type: string
                    format: password
                    example: "as5f4as5df132"
      responses:
        '200':
          description: OK - Successfully updated.
        '401':
          description: Unauthorized - Wrong username or email.

  /user/setusername:
    put:
      tags:
        - "User-General"

      description: Sets username of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  uid:
                    type: integer
                    format: user_id
                    example: 1
                  username:
                    type: string
                    format: username
                    example: "usn_a23s"
      responses:
        '200':
          description: OK - Successfully updated.
        '401':
          description: Unauthorized - Wrong username or email.

  /user/getfriends:
    get:
      tags:
        - "User-Friend"

      description: Lists user's friends
      parameters:
        - in: query
          name: uid
          schema:
            type: integer
          description: Id of user
          example: 1
      responses:
        '200':
          description: OK - Successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    user_id:
                      type: integer
                    user_name:
                      type: string
                    name:
                      type: string
                    biography:
                      type: string        
        '401':
          description: Unauthorized - Token is expired or wrong.


  /user/getusers:
    get:
      tags:
        - "User-Friend"

      description: Lists non friend users except itself. Friends mush have accepeted.
      parameters:
        - in: query
          name: uid
          schema:
            type: integer
          description: Id of user
          example: 1
      responses:
        '200':
          description: OK - Successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    user_id:
                      type: integer
                    user_name:
                      type: string
                    name:
                      type: string
                    biography:
                      type: string        
        '401':
          description: Unauthorized - Token is expired or wrong.

  /user/getuser:
    get:
      tags:
        - "User-General"

      description: Gets user's all information.
      parameters:
        - in: query
          name: uid
          schema:
            type: integer
          description: Id of user
          example: 1
      responses:
        '200':
          description: OK - Successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    user_id:
                      type: integer
                    user_name:
                      type: string
                    email:
                      type: string
                    name:
                      type: string
                    biography:
                      type: string   
                    password:
                      type: string
                    type:
                      type: integer     
        '401':
          description: Unauthorized - Token is expired or wrong.